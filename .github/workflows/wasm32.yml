name: wasm32
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
jobs:

  all:
    name: make all
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - run: git submodule update --init --recursive --
    - name: Install texinfo, bison, flex
      run: sudo apt-get install texinfo bison flex
    - name: Install GCC dependencies
      run: sudo apt-get install libgmp-dev libmpfr-dev libmpc-dev
    - name: Build binutils-gdb
      run: make OPT_NATIVE="-O0" -j10 built/wasm32/binutils-gdb
    - name: Build gcc-preliminary
      run: make OPT_NATIVE="-O0" -j10 built/wasm32/gcc-preliminary
    - name: Build glibc
      run: make OPT_WASM="-O1" -j10 built/wasm32/glibc
    - name: Build gcc
      run: make OPT_NATIVE="-O1" -j10 built/wasm32/gcc
    - name: Build ncurses
      run: make -j10 built/wasm32/ncurses
    - name: Build bash
      run: make -j10 built/wasm32/bash
    - name: Build wabt
      run: make -j10 built/common/wabt
    - name: Build binaryen
      run: make -j10 built/common/binaryen
    - name: Build all
      run: make -j10 all

  tests:
    name: Run tests
    runs-on: ubuntu-latest
    needs:
    - gcc
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: false
    - name: Download binutils
      uses: actions/download-artifact@v1
      with:
        name:
          wasm32-unknown-none-binutils.tar
    - name: Download gcc-preliminary
      uses: actions/download-artifact@v1
      with:
        name:
          wasm32-unknown-none-gcc-preliminary.tar
    - name: Download glibc
      uses: actions/download-artifact@v1
      with:
        name:
          wasm32-unknown-none-glibc.tar
    - name: Download gcc
      uses: actions/download-artifact@v1
      with:
        name:
          wasm32-unknown-none-gcc.tar
    - name: Unpack binutils
      run:
        tar xf wasm32-unknown-none-binutils.tar/wasm32-unknown-none-binutils.tar
    - name: Unpack gcc-preliminary
      run:
        tar xf wasm32-unknown-none-gcc-preliminary.tar/wasm32-unknown-none-gcc-preliminary.tar
    - name: Unpack glibc
      run:
        tar xf wasm32-unknown-none-glibc.tar/wasm32-unknown-none-glibc.tar
    - name: Unpack gcc
      run:
        tar xf wasm32-unknown-none-gcc.tar/wasm32-unknown-none-gcc.tar
    - name: Run tests
      run:
        make -kj10 all-tests

  binaryen:
    name: binaryen
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: false
    - name: Check out subrepos/binaryen
      run: git submodule update --depth=1 --single-branch --init subrepos/binaryen
    - name: Build binaryen
      run: make built/common/binaryen

  wabt:
    name: wabt
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: false
    - name: Check out subrepos/wabt
      run: git submodule update --depth=1 --single-branch --recursive --init subrepos/wabt
    - name: Build wabt
      run: make built/common/wabt

  jsshell:
    name: jsshell
    runs-on: ubuntu-latest
    steps:
    - name: Download jsshell
      run: wget http://ftp.mozilla.org/pub/firefox/nightly/latest-mozilla-central/jsshell-linux-x86_64.zip
    - name: Upload jsshell
      uses: actions/upload-artifact@v1
      with:
        name: jsshell-linux-x86_64.zip
        path: jsshell-linux-x86_64.zip

  wasm32-js:
    name: wasm32.js
    runs-on: ubuntu-latest
    steps:
    - name: Install cpanm
      run: sudo apt-get install cpanminus
    - name: Install File::Slurp
      run: cpanm File::Slurp
    - uses: actions/checkout@v2
      with:
        submodules: false
    - name: Build wasm32.js
      run: make js/wasm32.js
    - name: Upload wasm32.js
      uses: actions/upload-artifact@v1
      with:
        name: wasm32.js
        path: js/wasm32.js

  binutils:
    name: binutils
    runs-on: ubuntu-latest
    steps:
    - name: Install texinfo, bison, flex
      run: sudo apt-get install texinfo bison flex
    - uses: actions/checkout@v2
      with:
        submodules: false
    - name: Check out subrepos/binutils-gdb
      run: git submodule update --depth=1 --single-branch --init subrepos/binutils-gdb
    - name: Artifact timestamp
      run: touch artifact.stmp
    - name: Build binutils
      run: make -kj10 built/wasm32/binutils-gdb
    - name: Create binutils
      run: tar cf wasm32-unknown-none-binutils.tar wasm32-unknown-none built -N ./artifact.stmp
    - name: Upload binutils
      uses: actions/upload-artifact@v1
      with:
        name: wasm32-unknown-none-binutils.tar
        path: wasm32-unknown-none-binutils.tar

  gcc-preliminary:
    name: gcc (preliminary)
    runs-on: ubuntu-latest
    needs: binutils
    steps:
    - name: Install texinfo, bison, flex
      run: sudo apt-get install texinfo bison flex
    - name: Install GCC dependencies
      run: sudo apt-get install libgmp-dev libmpfr-dev libmpc-dev
    - uses: actions/checkout@v2
      with:
        submodules: false
    - name: Check out subrepos/gcc
      run: git submodule update --depth=1 --single-branch --init subrepos/gcc
    - name: Download binutils
      uses: actions/download-artifact@v1
      with:
        name:
          wasm32-unknown-none-binutils.tar
    - name: Unpack binutils
      run:
        tar xf wasm32-unknown-none-binutils.tar/wasm32-unknown-none-binutils.tar
    - name: Artifact timestamp
      run: touch artifact.stmp
    - name: Build preliminary gcc
      run: make -kj10 built/wasm32/gcc-preliminary
    - name: Create gcc-preliminary
      run: tar cf wasm32-unknown-none-gcc-preliminary.tar wasm32-unknown-none built -N ./artifact.stmp
    - name: Upload gcc-preliminary
      uses: actions/upload-artifact@v1
      with:
        name: wasm32-unknown-none-gcc-preliminary.tar
        path: wasm32-unknown-none-gcc-preliminary.tar

  glibc:
    name: glibc
    runs-on: ubuntu-latest
    needs: gcc-preliminary
    steps:
    - name: Install texinfo, bison, flex
      run: sudo apt-get install texinfo bison flex
    - uses: actions/checkout@v2
      with:
        submodules: false
    - name: Check out subrepos/glibc
      run: git submodule update --depth=1 --single-branch --init subrepos/glibc
    - name: Download binutils
      uses: actions/download-artifact@v1
      with:
        name:
          wasm32-unknown-none-binutils.tar
    - name: Download gcc-preliminary
      uses: actions/download-artifact@v1
      with:
        name:
          wasm32-unknown-none-gcc-preliminary.tar
    - name: Unpack binutils
      run:
        tar xf wasm32-unknown-none-binutils.tar/wasm32-unknown-none-binutils.tar
    - name: Unpack gcc-preliminary
      run:
        tar xf wasm32-unknown-none-gcc-preliminary.tar/wasm32-unknown-none-gcc-preliminary.tar
    - name: Artifact timestamp
      run: touch artifact.stmp
    - name: Build glibc
      run: make -kj10 built/wasm32/glibc
    - name: Create glibc
      run: tar cf wasm32-unknown-none-glibc.tar wasm32-unknown-none built -N ./artifact.stmp
    - name: Upload glibc
      uses: actions/upload-artifact@v1
      with:
        name: wasm32-unknown-none-glibc.tar
        path: wasm32-unknown-none-glibc.tar
    - name: Generate ld.wasm
      run: make wasm/ld.wasm wasm/libc.wasm
    - name: Generate libc.wasm
      run: make wasm/libc.wasm
    - name: Upload ld.wasm
      uses: actions/upload-artifact@v1
      with:
        name: ld.wasm
        path: wasm/ld.wasm
    - name: Upload libc.wasm
      uses: actions/upload-artifact@v1
      with:
        name: libc.wasm
        path: wasm/libc.wasm

  gcc:
    name: gcc
    runs-on: ubuntu-latest
    needs: glibc
    steps:
    - name: Install texinfo, bison, flex
      run: sudo apt-get install texinfo bison flex
    - name: Install gcc dependencies
      run: sudo apt-get install libgmp-dev libmpfr-dev libmpc-dev
    - uses: actions/checkout@v2
      with:
        submodules: false
    - name: Check out subrepos/gcc
      run: git submodule update --depth=1 --single-branch --init subrepos/gcc
    - name: Download binutils
      uses: actions/download-artifact@v1
      with:
        name:
          wasm32-unknown-none-binutils.tar
    - name: Download gcc-preliminary
      uses: actions/download-artifact@v1
      with:
        name:
          wasm32-unknown-none-gcc-preliminary.tar
    - name: Download glibc
      uses: actions/download-artifact@v1
      with:
        name:
          wasm32-unknown-none-glibc.tar
    - name: Unpack binutils
      run:
        tar xf wasm32-unknown-none-binutils.tar/wasm32-unknown-none-binutils.tar
    - name: Unpack gcc-preliminary
      run:
        tar xf wasm32-unknown-none-gcc-preliminary.tar/wasm32-unknown-none-gcc-preliminary.tar
    - name: Unpack glibc
      run:
        tar xf wasm32-unknown-none-glibc.tar/wasm32-unknown-none-glibc.tar
    - name: Artifact timestamp
      run: touch artifact.stmp
    - name: Build gcc
      run: make -kj10 built/wasm32/gcc
    - name: Create gcc
      run: tar cf wasm32-unknown-none-gcc.tar wasm32-unknown-none built -N ./artifact.stmp
    - name: Upload gcc
      uses: actions/upload-artifact@v1
      with:
        name: wasm32-unknown-none-gcc.tar
        path: wasm32-unknown-none-gcc.tar

  ncurses:
    name: ncurses
    runs-on: ubuntu-latest
    needs: gcc
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: false
    - name: Check out subrepos/ncurses
      run: git submodule update --depth=1 --single-branch --init subrepos/ncurses
    - name: Download binutils
      uses: actions/download-artifact@v1
      with:
        name:
          wasm32-unknown-none-binutils.tar
    - name: Download gcc-preliminary
      uses: actions/download-artifact@v1
      with:
        name:
          wasm32-unknown-none-gcc-preliminary.tar
    - name: Download glibc
      uses: actions/download-artifact@v1
      with:
        name:
          wasm32-unknown-none-glibc.tar
    - name: Download gcc
      uses: actions/download-artifact@v1
      with:
        name:
          wasm32-unknown-none-gcc.tar
    - name: Unpack binutils
      run:
        tar xf wasm32-unknown-none-binutils.tar/wasm32-unknown-none-binutils.tar
    - name: Unpack gcc-preliminary
      run:
        tar xf wasm32-unknown-none-gcc-preliminary.tar/wasm32-unknown-none-gcc-preliminary.tar
    - name: Unpack glibc
      run:
        tar xf wasm32-unknown-none-glibc.tar/wasm32-unknown-none-glibc.tar
    - name: Unpack gcc
      run:
        tar xf wasm32-unknown-none-gcc.tar/wasm32-unknown-none-gcc.tar
    - name: Artifact timestamp
      run: touch artifact.stmp
    - name: Build ncurses
      run: make -kj10 built/wasm32/ncurses
    - name: Create ncurses
      run: tar cf wasm32-unknown-none-ncurses.tar wasm32-unknown-none built -N ./artifact.stmp
    - name: Upload ncurses
      uses: actions/upload-artifact@v1
      with:
        name: wasm32-unknown-none-ncurses.tar
        path: wasm32-unknown-none-ncurses.tar
    - name: Generate libncurses.wasm
      run: make wasm/libncurses.wasm
    - name: Upload libncurses.wasm
      uses: actions/upload-artifact@v1
      with:
        name: libncurses.wasm
        path: wasm/libncurses.wasm

  _001-hello-world-o:
    name: Hello World (assemble)
    runs-on: ubuntu-latest
    needs: gcc-preliminary
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: false
    - name: Download binutils
      uses: actions/download-artifact@v1
      with:
        name:
          wasm32-unknown-none-binutils.tar
    - name: Download gcc-preliminary
      uses: actions/download-artifact@v1
      with:
        name:
          wasm32-unknown-none-gcc-preliminary.tar
    - name: Unpack binutils
      run:
        tar xf wasm32-unknown-none-binutils.tar/wasm32-unknown-none-binutils.tar
    - name: Unpack gcc-preliminary
      run:
        tar xf wasm32-unknown-none-gcc-preliminary.tar/wasm32-unknown-none-gcc-preliminary.tar
    - name: Assemble hello-world.o
      run: ./wasm32-unknown-none/bin/wasm32-unknown-none-as -Iwasm32-unknown-none/lib/gcc/wasm32-unknown-none/11.0.0/gas-macros/ -c -o 001-hello-world.o tests/001-hello-world/hello-world.S
    - name: Upload hello-world.o
      uses: actions/upload-artifact@v1
      with:
        name: 001-hello-world.o
        path: 001-hello-world.o

  _001-hello-world-exe:
    name: Hello World (preliminary C version)
    runs-on: ubuntu-latest
    needs:
      - glibc
      - _001-hello-world-o
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: false
    - name: Download binutils
      uses: actions/download-artifact@v1
      with:
        name:
          wasm32-unknown-none-binutils.tar
    - name: Download gcc-preliminary
      uses: actions/download-artifact@v1
      with:
        name:
          wasm32-unknown-none-gcc-preliminary.tar
    - name: Download glibc
      uses: actions/download-artifact@v1
      with:
        name:
          wasm32-unknown-none-glibc.tar
    - name: Unpack binutils
      run:
        tar xf wasm32-unknown-none-binutils.tar/wasm32-unknown-none-binutils.tar
    - name: Unpack gcc-preliminary
      run:
        tar xf wasm32-unknown-none-gcc-preliminary.tar/wasm32-unknown-none-gcc-preliminary.tar
    - name: Unpack glibc
      run:
        tar xf wasm32-unknown-none-glibc.tar/wasm32-unknown-none-glibc.tar
    - name: Compile hello-world.exe
      run: ./wasm32-unknown-none/bin/wasm32-unknown-none-gcc ./tests/002-hello-world/hello-world.c -o 001-hello-world.exe
    - name: Upload hello-world.exe
      uses: actions/upload-artifact@v1
      with:
        name: 001-hello-world.exe
        path: 001-hello-world.exe

  _003-hello-world-exe:
    name: Hello World (final C version)
    runs-on: ubuntu-latest
    needs: gcc
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: false
    - name: Download binutils
      uses: actions/download-artifact@v1
      with:
        name:
          wasm32-unknown-none-binutils.tar
    - name: Download gcc-preliminary
      uses: actions/download-artifact@v1
      with:
        name:
          wasm32-unknown-none-gcc-preliminary.tar
    - name: Download glibc
      uses: actions/download-artifact@v1
      with:
        name:
          wasm32-unknown-none-glibc.tar
    - name: Download gcc
      uses: actions/download-artifact@v1
      with:
        name:
          wasm32-unknown-none-gcc.tar
    - name: Unpack binutils
      run:
        tar xf wasm32-unknown-none-binutils.tar/wasm32-unknown-none-binutils.tar
    - name: Unpack gcc-preliminary
      run:
        tar xf wasm32-unknown-none-gcc-preliminary.tar/wasm32-unknown-none-gcc-preliminary.tar
    - name: Unpack glibc
      run:
        tar xf wasm32-unknown-none-glibc.tar/wasm32-unknown-none-glibc.tar
    - name: Unpack gcc
      run:
        tar xf wasm32-unknown-none-gcc.tar/wasm32-unknown-none-gcc.tar
    - name: Compile hello-world.exe
      run: ./wasm32-unknown-none/bin/wasm32-unknown-none-gcc ./tests/003-hello-world/hello-world.c -o 003-hello-world.exe
    - name: Upload hello-world.exe
      uses: actions/upload-artifact@v1
      with:
        name: 003-hello-world.exe
        path: 003-hello-world.exe

  _001-hello-world-run:
    name: Hello World (run)
    runs-on: ubuntu-latest
    needs:
      - _001-hello-world-wasm
      - jsshell
      - wasm32-js
      - glibc
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: false
      - name: Download jsshell
        uses: actions/download-artifact@v1
        with:
          name: jsshell-linux-x86_64.zip
      - name: Unpack jsshell
        run: unzip jsshell-linux-x86_64.zip/jsshell-linux-x86_64.zip -d bin
      - name: Download wasm32.js
        uses: actions/download-artifact@v1
        with:
          name: wasm32.js
      - run: mkdir js
      - name: Unpack wasm32.js
        run: cp wasm32.js/wasm32.js js/wasm32.js
      - name: Download 001-hello-world.wasm
        uses: actions/download-artifact@v1
        with:
          name: 001-hello-world.wasm
      - name: Download ld.wasm
        uses: actions/download-artifact@v1
        with:
          name: ld.wasm
      - name: Download libc.wasm
        uses: actions/download-artifact@v1
        with:
          name: libc.wasm
      - name: Directory shuffle
        run: mkdir wasm-dirs && mv *.wasm wasm-dirs
      - name: Copy *.wasm
        run: cp wasm-dirs/*.wasm/*.wasm .
      - name: Run
        run: WASMDIR=. ./bin/js ./js/wasm32.js ./001-hello-world.wasm

  _001-hello-world-wasm:
    name: Hello World (WASM)
    runs-on: ubuntu-latest
    needs:
    - _001-hello-world-exe
    - glibc
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: false
    - name: Download binutils
      uses: actions/download-artifact@v1
      with:
        name: wasm32-unknown-none-binutils.tar
    - name: Download gcc-preliminary
      uses: actions/download-artifact@v1
      with:
        name: wasm32-unknown-none-gcc-preliminary.tar
    - name: Download glibc
      uses: actions/download-artifact@v1
      with:
        name: wasm32-unknown-none-glibc.tar
    - name: Unpack binutils
      run:
        tar xf wasm32-unknown-none-binutils.tar/wasm32-unknown-none-binutils.tar
    - name: Unpack gcc-preliminary
      run:
        tar xf wasm32-unknown-none-gcc-preliminary.tar/wasm32-unknown-none-gcc-preliminary.tar
    - name: Unpack glibc
      run:
        tar xf wasm32-unknown-none-glibc.tar/wasm32-unknown-none-glibc.tar
    - name: Download 001-hello-world.exe
      uses: actions/download-artifact@v1
      with:
        name: 001-hello-world.exe
    - name: Build wasmrewrite
      run: make bin/wasmrewrite
    - name: Build wasmssect
      run: make bin/wasmsect
    - name: Generate hello-world.wasm
      run: bash -x ./wasmify/wasmify-executable 001-hello-world.exe/001-hello-world.exe > 001-hello-world.wasm
    - name: Upload hello-world.wasm
      uses: actions/upload-artifact@v1
      with:
        name: 001-hello-world.wasm
        path: 001-hello-world.wasm

  bash:
    name: bash
    runs-on: ubuntu-latest
    needs:
      # bash fails to compile unless ncurses is there, too.
      - ncurses
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: false
    - name: Check out subrepos/bash
      run: git submodule update --depth=1 --single-branch --init subrepos/bash
    - name: Download binutils
      uses: actions/download-artifact@v1
      with:
        name:
          wasm32-unknown-none-binutils.tar
    - name: Download gcc-preliminary
      uses: actions/download-artifact@v1
      with:
        name:
          wasm32-unknown-none-gcc-preliminary.tar
    - name: Download glibc
      uses: actions/download-artifact@v1
      with:
        name:
          wasm32-unknown-none-glibc.tar
    - name: Download gcc
      uses: actions/download-artifact@v1
      with:
        name:
          wasm32-unknown-none-gcc.tar
    - name: Download ncurses
      uses: actions/download-artifact@v1
      with:
        name:
          wasm32-unknown-none-ncurses.tar
    - name: Unpack binutils
      run:
        tar xf wasm32-unknown-none-binutils.tar/wasm32-unknown-none-binutils.tar
    - name: Unpack gcc-preliminary
      run:
        tar xf wasm32-unknown-none-gcc-preliminary.tar/wasm32-unknown-none-gcc-preliminary.tar
    - name: Unpack glibc
      run:
        tar xf wasm32-unknown-none-glibc.tar/wasm32-unknown-none-glibc.tar
    - name: Unpack gcc
      run:
        tar xf wasm32-unknown-none-gcc.tar/wasm32-unknown-none-gcc.tar
    - name: Unpack ncurses
      run:
        tar xf wasm32-unknown-none-ncurses.tar/wasm32-unknown-none-ncurses.tar
    - name: Build bash
      run: make -kj10 built/wasm32/bash
    - name: Generate bash.wasm
      run: make -kj10 wasm/bash.wasm
    - name: Upload bash.wasm
      uses: actions/upload-artifact@v1
      with:
        name: bash.wasm
        path: wasm/bash.wasm

  # emacs:
  #   name: emacs
  #   runs-on: ubuntu-latest
  #   needs:
  #     - ncurses
  #   steps:
  #   - name: install texinfo, bison, flex
  #     run: sudo apt-get install texinfo bison flex
  #   - uses: actions/checkout@v2
  #     with:
  #       submodules: false
  #   - name: Check out subrepos/emacs
  #     run: git submodule update --depth=1 --single-branch --init subrepos/emacs
  #   - name: Download binutils
  #     uses: actions/download-artifact@v1
  #     with:
  #       name:
  #         wasm32-unknown-none-binutils.tar
  #   - name: Download gcc-preliminary
  #     uses: actions/download-artifact@v1
  #     with:
  #       name:
  #         wasm32-unknown-none-gcc-preliminary.tar
  #   - name: Download glibc
  #     uses: actions/download-artifact@v1
  #     with:
  #       name:
  #         wasm32-unknown-none-glibc.tar
  #   - name: Download gcc
  #     uses: actions/download-artifact@v1
  #     with:
  #       name:
  #         wasm32-unknown-none-gcc.tar
  #   - name: Download ncurses
  #     uses: actions/download-artifact@v1
  #     with:
  #       name:
  #         wasm32-unknown-none-ncurses.tar
  #   - name: Unpack binutils
  #     run:
  #       tar xf wasm32-unknown-none-binutils.tar/wasm32-unknown-none-binutils.tar
  #   - name: Unpack gcc-preliminary
  #     run:
  #       tar xf wasm32-unknown-none-gcc-preliminary.tar/wasm32-unknown-none-gcc-preliminary.tar
  #   - name: Unpack glibc
  #     run:
  #       tar xf wasm32-unknown-none-glibc.tar/wasm32-unknown-none-glibc.tar
  #   - name: Unpack gcc
  #     run:
  #       tar xf wasm32-unknown-none-gcc.tar/wasm32-unknown-none-gcc.tar
  #   - name: Unpack ncurses
  #     run:
  #       tar xf wasm32-unknown-none-ncurses.tar/wasm32-unknown-none-ncurses.tar
  #   - name: Build emacs
  #     run: make -kj10 built/wasm32/emacs
  #   - name: Build emacs.wasm
  #     run: make -kj10 wasm/emacs.wasm
  #   - name: Upload emacs.wasm
  #     uses: actions/upload-artifact@v1
  #     with:
  #       name: emacs.wasm
  #       path: wasm/emacs.wasm

  # ship:
  #   name: ship
  #   runs-on: ubuntu-latest
  #   needs:
  #     - ncurses
  #     - bash
  #   steps:
  #   - uses: actions/checkout@v2
  #     with:
  #       submodules: false
  #   - name: Download wasm32.js
  #     uses: actions/download-artifact@v1
  #     with:
  #       name: wasm32.js
  #   - name: Upload wasm32.js
  #     uses: skx/github-action-publish-binaries@master
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       args: 'wasm32.js/wasm32.js'
  #       releaseId: '27619169'
  #   - name: Download ld.wasm
  #     uses: actions/download-artifact@v1
  #     with:
  #       name: ld.wasm
  #   - name: Upload ld.wasm
  #     uses: skx/github-action-publish-binaries@master
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       args: 'ld.wasm/ld.wasm'
  #       releaseId: '27619169'
  #   - name: Download libc.wasm
  #     uses: actions/download-artifact@v1
  #     with:
  #       name: libc.wasm
  #   - name: Upload libc.wasm
  #     uses: skx/github-action-publish-binaries@master
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       args: 'libc.wasm/libc.wasm'
  #       releaseId: '27619169'
  #   - name: Download libncurses.wasm
  #     uses: actions/download-artifact@v1
  #     with:
  #       name: libncurses.wasm
  #   - name: Upload libncurses.wasm
  #     uses: skx/github-action-publish-binaries@master
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       args: 'libncurses.wasm/libncurses.wasm'
  #       releaseId: '27619169'
  #   - name: Download 001-hello-world.wasm
  #     uses: actions/download-artifact@v1
  #     with:
  #       name: 001-hello-world.wasm
  #   - name: Upload 001-hello-world.wasm
  #     uses: skx/github-action-publish-binaries@master
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       args: '001-hello-world.wasm/001-hello-world.wasm'
  #       releaseId: '27619169'

  # test-hello-world-wasm:
  #   name: test interpreter
  #   runs-on: ubuntu-latest
  #   needs:
  #   - jsshell
  #   - wasm32-js
  #   steps:
  #   - uses: actions/checkout@v2
  #     with:
  #       submodules: false
  #   - name: Download jsshell
  #     uses: actions/download-artifact@v1
  #     with:
  #       name: jsshell-linux-x86_64.zip
  #   - name: Download wasm32.js
  #     uses: actions/download-artifact@v1
  #     with:
  #       name: wasm32.js
  #   - run: mkdir js
  #   - name: Unpack jsshell
  #     run: unzip jsshell-linux-x86_64.zip/jsshell-linux-x86_64.zip -d bin
  #   - name: Unpack wasm32.js
  #     run: cp wasm32.js/wasm32.js js/wasm32.js
  #   - run: wget https://github.com/pipcet/wasm/releases/download/latest/001-hello-world.wasm
  #   - name: Directory shuffle
  #     run: mkdir wasm-dirs && mv *.wasm wasm-dirs
  #   - name: Copy *.wasm
  #     run: cp wasm-dirs/*.wasm/*.wasm .
  #   - name: Run
  #     run: WASMDIR=. ./bin/js ./js/wasm32.js ./001-hello-world.wasm

  # test-shipped:
  #   name: test shipped binaries
  #   runs-on: ubuntu-latest
  #   needs:
  #   - binutils
  #   - gcc-preliminary
  #   - jsshell
  #   - wasm32-js
  #   steps:
  #   - uses: actions/checkout@v2
  #     with:
  #       submodules: false
  #   - name: Download jsshell
  #     uses: actions/download-artifact@v1
  #     with:
  #       name: jsshell-linux-x86_64.zip
  #   - name: Unpack jsshell
  #     run: unzip jsshell-linux-x86_64.zip/jsshell-linux-x86_64.zip -d bin
  #   - name: Download wasm32.js
  #     uses: actions/download-artifact@v1
  #     with:
  #       name: wasm32.js
  #   - run: mkdir js
  #   - name: Unpack wasm32.js
  #     run: cp wasm32.js/wasm32.js js/wasm32.js
  #   - run: wget https://github.com/pipcet/wasm/releases/download/latest/ld.wasm
  #   - run: wget https://github.com/pipcet/wasm/releases/download/latest/libc.wasm
  #   - name: Download binutils
  #     uses: actions/download-artifact@v1
  #     with:
  #       name:
  #         wasm32-unknown-none-binutils.tar
  #   - name: Unpack binutils
  #     run:
  #       tar xf wasm32-unknown-none-binutils.tar/wasm32-unknown-none-binutils.tar
  #   - name: Download gcc-preliminary
  #     uses: actions/download-artifact@v1
  #     with:
  #       name:
  #         wasm32-unknown-none-gcc-preliminary.tar
  #   - name: Unpack gcc-preliminary
  #     run:
  #       tar xf wasm32-unknown-none-gcc-preliminary.tar/wasm32-unknown-none-gcc-preliminary.tar
  #   - run: ./wasm32-unknown-none/bin/wasm32-unknown-none-as -Iwasm32-unknown-none/lib/gcc/wasm32-unknown-none/11.0.0/gas-macros/ -c -o 001-hello-world.o tests/001-hello-world/hello-world.S
  #   - run: ./wasm32-unknown-none/bin/wasm32-unknown-none-ld -o 001-hello-world 001-hello-world.o
  #   - name: Directory shuffle
  #     run: mkdir wasm-dirs && mv *.wasm wasm-dirs
  #   - name: Copy *.wasm
  #     run: cp wasm-dirs/*.wasm/*.wasm .
  #   - name: Run
  #     run: WASMDIR=. ./bin/js ./js/wasm32.js ./001-hello-world.wasm
