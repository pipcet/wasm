name: wasm32
on:
  push:
    branches: [ master, wasm ]
  pull_request:
    branches: [ master, wasm ]
jobs:
  tests:
    name: Run tests
    runs-on: ubuntu-latest
    needs:
    - jsshell
    - glibc
    - gcc
    - wasm32-js
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: false
    - name: Download wasm32.js
      uses: actions/download-artifact@v1
      with:
        name: wasm32.js
    - run: mkdir js
    - name: Unpack wasm32.js
      run: cp wasm32.js/wasm32.js js/wasm32.js
    - name: Download jsshell
      uses: actions/download-artifact@v1
      with:
        name: jsshell-linux-x86_64.zip
    - name: Unpack jsshell
      run: unzip jsshell-linux-x86_64.zip/jsshell-linux-x86_64.zip -d bin
    - name: Download binutils
      uses: actions/download-artifact@v1
      with:
        name:
          binutils.tar
    - name: Download gcc
      uses: actions/download-artifact@v1
      with:
        name:
          gcc.tar
    - name: Download gcc-preliminary
      uses: actions/download-artifact@v1
      with:
        name:
          gcc-preliminary.tar
    - name: Download glibc
      uses: actions/download-artifact@v1
      with:
        name:
          glibc.tar
    - name: Download libc.wasm
      uses: actions/download-artifact@v1
      with:
        name:
          libc.wasm
    - name: Download libstdc++.wasm
      uses: actions/download-artifact@v1
      with:
        name:
          libstdc++.wasm
    - name: Download libm.wasm
      uses: actions/download-artifact@v1
      with:
        name:
          libm.wasm
    - name: Download ld.wasm
      uses: actions/download-artifact@v1
      with:
        name:
          ld.wasm
    - name: Unpack binutils
      run:
        tar xf binutils.tar/binutils.tar
    - name: Unpack gcc-preliminary
      run:
        tar xf gcc-preliminary.tar/gcc-preliminary.tar
    - name: Unpack glibc
      run:
        tar xf glibc.tar/glibc.tar
    - name: Unpack gcc
      run:
        tar xf gcc.tar/gcc.tar
    - name: Build wasmrewrite
      run: make tools/bin/wasmrewrite
    - name: Build wasmssect
      run: make tools/bin/wasmsect
    - name: Directory shuffle
      run: mkdir wasm-dirs && mv *.wasm wasm-dirs
    - name: Copy *.wasm
      run: cp wasm-dirs/*.wasm/*.wasm .
    - name: Copy *.wasm to wasm/
      run: mkdir wasm; cp *.wasm wasm
    - name: Run tests
      run:
        JS=$(pwd)/bin/js WASMDIR=$(pwd) make -k run-all-tests!

  binaryen:
    name: binaryen
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: false
    - name: Check out subrepos/binaryen
      run: git submodule update --depth=1 --single-branch --init subrepos/binaryen
    - name: Build binaryen
      run: make built/common/binaryen

  wabt:
    name: wabt
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: false
    - name: Check out subrepos/wabt
      run: git submodule update --depth=1 --single-branch --recursive --init subrepos/wabt
    - name: Build wabt
      run: make built/common/wabt

  jsshell:
    name: jsshell
    runs-on: ubuntu-latest
    steps:
    - name: Download jsshell
      run: wget http://ftp.mozilla.org/pub/firefox/nightly/latest-mozilla-central/jsshell-linux-x86_64.zip
    - name: Upload jsshell
      uses: actions/upload-artifact@v1
      with:
        name: jsshell-linux-x86_64.zip
        path: jsshell-linux-x86_64.zip

  binutils:
    name: binutils
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: false
    - name: Set env variables
      uses: ./github/env/
    - run: make -kj10 artifact-binutils!
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  wasm32-js:
    name: wasm32.js
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: false
    - name: Set env variables
      uses: ./github/env/
    - run: make artifact-wasm32.js!
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  gcc-preliminary:
    name: gcc (preliminary)
    runs-on: ubuntu-latest
    needs: binutils
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: false
    - name: Set env variables
      uses: ./github/env/
    - run: make -kj10 artifact-gcc-preliminary!
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  glibc:
    name: glibc
    runs-on: ubuntu-latest
    needs: gcc-preliminary
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: false
    - name: Set env variables
      uses: ./github/env/
    - run: make -kj10 artifact-glibc!
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  gcc:
    name: gcc
    runs-on: ubuntu-latest
    needs: glibc
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: false
    - name: Set env variables
      uses: ./github/env/
    - run: make -kj10 artifact-gcc!
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  ncurses:
    name: ncurses
    runs-on: ubuntu-latest
    needs: gcc
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: false
    - name: Set env variables
      uses: ./github/env/
    - run: make -kj10 artifact-ncurses!
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  bash:
    name: bash
    runs-on: ubuntu-latest
    needs:
      # bash fails to compile unless ncurses is there, too.
      - ncurses
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: false
    - name: Set env variables
      uses: ./github/env/
    - run: make -k artifact-bash!
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  bash-run:
    name: Run bash
    runs-on: ubuntu-latest
    needs:
    - bash
    - jsshell
    - wasm32-js
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: false
    - name: Download jsshell
      uses: actions/download-artifact@v1
      with:
        name: jsshell-linux-x86_64.zip
    - name: Unpack jsshell
      run: unzip jsshell-linux-x86_64.zip/jsshell-linux-x86_64.zip -d bin
    - name: Download wasm32.js
      uses: actions/download-artifact@v1
      with:
        name: wasm32.js
    - run: mkdir js
    - name: Unpack wasm32.js
      run: cp wasm32.js/wasm32.js js/wasm32.js
    - name: Download bash.wasm
      uses: actions/download-artifact@v1
      with:
        name: bash.wasm
    - name: Download libncurses.wasm
      uses: actions/download-artifact@v1
      with:
        name: libncurses.wasm
    - name: Download ld.wasm
      uses: actions/download-artifact@v1
      with:
        name: ld.wasm
    - name: Download libc.wasm
      uses: actions/download-artifact@v1
      with:
        name: libc.wasm
    - name: Download libc.wasm
      uses: actions/download-artifact@v1
      with:
        name: libdl.wasm
    - name: Directory shuffle
      run: mkdir wasm-dirs && mv *.wasm wasm-dirs
    - name: Copy *.wasm
      run: cp wasm-dirs/*.wasm/*.wasm .
    - name: Copy *.wasm
      run: mkdir wasm
    - name: Copy *.wasm
      run: cp wasm-dirs/*.wasm/*.wasm wasm
    - name: Set env variables
      uses: ./github/env/
    - name: Install binfmt_misc
      run: make github/install/binfmt_misc/wasm
    - name: chmod
      run: chmod a+x bash.wasm
    - name: ls -l
      run: ls -l bash.wasm
    - name: Run
      run: WASMDIR=. JS=`pwd`/bin/js `pwd`/bash.wasm -c 'echo $((3*4*5))'

  miniperl:
    name: miniperl
    runs-on: ubuntu-latest
    needs:
      - glibc
      - gcc
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: false
    - name: Set env variables
      uses: ./github/env/
    - run: make -k artifact-miniperl!
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  _001-hello-world-o:
    name: Hello World (assemble)
    runs-on: ubuntu-latest
    needs: gcc-preliminary
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: false
    - name: Download binutils
      uses: actions/download-artifact@v1
      with:
        name:
          binutils.tar
    - name: Download gcc-preliminary
      uses: actions/download-artifact@v1
      with:
        name:
          gcc-preliminary.tar
    - name: Unpack binutils
      run:
        tar xf binutils.tar/binutils.tar
    - name: Unpack gcc-preliminary
      run:
        tar xf gcc-preliminary.tar/gcc-preliminary.tar
    - name: Assemble hello-world.o
      run: ./wasm32-unknown-none/bin/wasm32-unknown-none-as -Iwasm32-unknown-none/lib/gcc/wasm32-unknown-none/11.0.0/gas-macros/ -c -o 001-hello-world.o testsuite/001-hello-world/hello-world.S
    - name: Upload hello-world.o
      uses: actions/upload-artifact@v1
      with:
        name: 001-hello-world.o
        path: 001-hello-world.o

  _001-hello-world-exe:
    name: Hello World (preliminary C version)
    runs-on: ubuntu-latest
    needs:
      - glibc
      - _001-hello-world-o
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: false
    - name: Download binutils
      uses: actions/download-artifact@v1
      with:
        name:
          binutils.tar
    - name: Download gcc-preliminary
      uses: actions/download-artifact@v1
      with:
        name:
          gcc-preliminary.tar
    - name: Download glibc
      uses: actions/download-artifact@v1
      with:
        name:
          glibc.tar
    - name: Unpack binutils
      run:
        tar xf binutils.tar/binutils.tar
    - name: Unpack gcc-preliminary
      run:
        tar xf gcc-preliminary.tar/gcc-preliminary.tar
    - name: Unpack glibc
      run:
        tar xf glibc.tar/glibc.tar
    - name: Compile hello-world.exe
      run: ./wasm32-unknown-none/bin/wasm32-unknown-none-gcc ./testsuite/002-hello-world/hello-world.c -o 001-hello-world.exe
    - name: Upload hello-world.exe
      uses: actions/upload-artifact@v1
      with:
        name: 001-hello-world.exe
        path: 001-hello-world.exe

  _003-hello-world-exe:
    name: Hello World (final C version)
    runs-on: ubuntu-latest
    needs: gcc
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: false
    - name: Download binutils
      uses: actions/download-artifact@v1
      with:
        name:
          binutils.tar
    - name: Download gcc-preliminary
      uses: actions/download-artifact@v1
      with:
        name:
          gcc-preliminary.tar
    - name: Download glibc
      uses: actions/download-artifact@v1
      with:
        name:
          glibc.tar
    - name: Download gcc
      uses: actions/download-artifact@v1
      with:
        name:
          gcc.tar
    - name: Unpack binutils
      run:
        tar xf binutils.tar/binutils.tar
    - name: Unpack gcc-preliminary
      run:
        tar xf gcc-preliminary.tar/gcc-preliminary.tar
    - name: Unpack glibc
      run:
        tar xf glibc.tar/glibc.tar
    - name: Unpack gcc
      run:
        tar xf gcc.tar/gcc.tar
    - name: Compile hello-world.exe
      run: ./wasm32-unknown-none/bin/wasm32-unknown-none-gcc ./testsuite/003-hello-world/hello-world.c -o 003-hello-world.exe
    - name: Upload hello-world.exe
      uses: actions/upload-artifact@v1
      with:
        name: 003-hello-world.exe
        path: 003-hello-world.exe

  _001-hello-world-run-binfmt:
    name: Hello World (run with binfmt_misc)
    runs-on: ubuntu-latest
    needs:
      - _001-hello-world-wasm
      - jsshell
      - wasm32-js
      - glibc
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: false
      - name: Download jsshell
        uses: actions/download-artifact@v1
        with:
          name: jsshell-linux-x86_64.zip
      - name: Unpack jsshell
        run: unzip jsshell-linux-x86_64.zip/jsshell-linux-x86_64.zip -d bin
      - name: Download wasm32.js
        uses: actions/download-artifact@v1
        with:
          name: wasm32.js
      - run: mkdir js
      - name: Unpack wasm32.js
        run: cp wasm32.js/wasm32.js js/wasm32.js
      - name: Download 001-hello-world.wasm
        uses: actions/download-artifact@v1
        with:
          name: 001-hello-world.wasm
      - name: Download ld.wasm
        uses: actions/download-artifact@v1
        with:
          name: ld.wasm
      - name: Download libc.wasm
        uses: actions/download-artifact@v1
        with:
          name: libc.wasm
      - name: Directory shuffle
        run: mkdir wasm-dirs && mv *.wasm wasm-dirs
      - name: Copy *.wasm
        run: cp wasm-dirs/*.wasm/*.wasm .
      - name: Set env variables
        uses: ./github/env/
      - name: Install binfmt_misc
        run: make github/install/binfmt_misc/wasm
      - name: chmod
        run: chmod a+x 001-hello-world.wasm
      - name: ls -l
        run: ls -l 001-hello-world.wasm
      - name: Run
        run: WASMDIR=. JS=`pwd`/bin/js `pwd`/001-hello-world.wasm

  _001-hello-world-run-elf-binfmt:
    name: Hello World (run ELF with binfmt_misc)
    runs-on: ubuntu-latest
    needs:
      - _001-hello-world-exe
      - jsshell
      - wasm32-js
      - glibc
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: false
      - name: Download binutils
        uses: actions/download-artifact@v1
        with:
          name:
            binutils.tar
      - name: Unpack binutils
        run:
          tar xf binutils.tar/binutils.tar
      - name: Download jsshell
        uses: actions/download-artifact@v1
        with:
          name: jsshell-linux-x86_64.zip
      - name: Unpack jsshell
        run: unzip jsshell-linux-x86_64.zip/jsshell-linux-x86_64.zip -d bin
      - name: Download wasm32.js
        uses: actions/download-artifact@v1
        with:
          name: wasm32.js
      - run: mkdir js
      - name: Unpack wasm32.js
        run: cp wasm32.js/wasm32.js js/wasm32.js
      - name: Download 001-hello-world.exe
        uses: actions/download-artifact@v1
        with:
          name: 001-hello-world.exe
      - name: Download ld.wasm
        uses: actions/download-artifact@v1
        with:
          name: ld.wasm
      - name: Download libc.wasm
        uses: actions/download-artifact@v1
        with:
          name: libc.wasm
      - name: Directory shuffle
        run: mkdir wasm-dirs && mv *.wasm *.exe wasm-dirs
      - name: Copy *.wasm
        run: cp wasm-dirs/*/* .
      - name: Set env variables
        uses: ./github/env/
      - name: Install binfmt_misc
        run: make github/install/binfmt_misc/elf32-wasm32
      - name: Build utilities
        run: make tools/bin/wasmrewrite tools/bin/wasmsect
      - name: chmod
        run: chmod a+x 001-hello-world.exe
      - name: ls -l
        run: ls -l 001-hello-world.exe
      - name: Run
        run: WASMDIR=. JS=`pwd`/bin/js `pwd`/001-hello-world.exe

  _001-hello-world-run:
    name: Hello World (run)
    runs-on: ubuntu-latest
    needs:
      - _001-hello-world-wasm
      - jsshell
      - wasm32-js
      - glibc
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: false
      - name: Download jsshell
        uses: actions/download-artifact@v1
        with:
          name: jsshell-linux-x86_64.zip
      - name: Unpack jsshell
        run: unzip jsshell-linux-x86_64.zip/jsshell-linux-x86_64.zip -d bin
      - name: Download wasm32.js
        uses: actions/download-artifact@v1
        with:
          name: wasm32.js
      - run: mkdir js
      - name: Unpack wasm32.js
        run: cp wasm32.js/wasm32.js js/wasm32.js
      - name: Download 001-hello-world.wasm
        uses: actions/download-artifact@v1
        with:
          name: 001-hello-world.wasm
      - name: Download ld.wasm
        uses: actions/download-artifact@v1
        with:
          name: ld.wasm
      - name: Download libc.wasm
        uses: actions/download-artifact@v1
        with:
          name: libc.wasm
      - name: Directory shuffle
        run: mkdir wasm-dirs && mv *.wasm wasm-dirs
      - name: Copy *.wasm
        run: cp wasm-dirs/*.wasm/*.wasm .
      - name: Run
        run: WASMDIR=. ./bin/js ./js/wasm32.js ./001-hello-world.wasm

  _001-hello-world-wasm:
    name: Hello World (WASM)
    runs-on: ubuntu-latest
    needs:
    - _001-hello-world-exe
    - glibc
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: false
    - name: Download binutils
      uses: actions/download-artifact@v1
      with:
        name: binutils.tar
    - name: Download gcc-preliminary
      uses: actions/download-artifact@v1
      with:
        name: gcc-preliminary.tar
    - name: Download glibc
      uses: actions/download-artifact@v1
      with:
        name: glibc.tar
    - name: Unpack binutils
      run:
        tar xf binutils.tar/binutils.tar
    - name: Unpack gcc-preliminary
      run:
        tar xf gcc-preliminary.tar/gcc-preliminary.tar
    - name: Unpack glibc
      run:
        tar xf glibc.tar/glibc.tar
    - name: Download 001-hello-world.exe
      uses: actions/download-artifact@v1
      with:
        name: 001-hello-world.exe
    - name: Build wasmrewrite
      run: make tools/bin/wasmrewrite
    - name: Build wasmssect
      run: make tools/bin/wasmsect
    - name: Generate hello-world.wasm
      run: tools/bin/elf-to-wasm --executable 001-hello-world.exe/001-hello-world.exe > 001-hello-world.wasm
    - name: Upload hello-world.wasm
      uses: actions/upload-artifact@v1
      with:
        name: 001-hello-world.wasm
        path: 001-hello-world.wasm

  # emacs:
  #   name: emacs
  #   runs-on: ubuntu-latest
  #   needs:
  #     - ncurses
  #   steps:
  #   - name: install texinfo, bison, flex
  #     run: sudo apt-get install texinfo bison flex
  #   - uses: actions/checkout@v2
  #     with:
  #       submodules: false
  #   - name: Check out subrepos/emacs
  #     run: git submodule update --depth=1 --single-branch --init subrepos/emacs
  #   - name: Download binutils
  #     uses: actions/download-artifact@v1
  #     with:
  #       name:
  #         binutils.tar
  #   - name: Download gcc-preliminary
  #     uses: actions/download-artifact@v1
  #     with:
  #       name:
  #         gcc-preliminary.tar
  #   - name: Download glibc
  #     uses: actions/download-artifact@v1
  #     with:
  #       name:
  #         glibc.tar
  #   - name: Download gcc
  #     uses: actions/download-artifact@v1
  #     with:
  #       name:
  #         gcc.tar
  #   - name: Download ncurses
  #     uses: actions/download-artifact@v1
  #     with:
  #       name:
  #         ncurses.tar
  #   - name: Unpack binutils
  #     run:
  #       tar xf binutils.tar/binutils.tar
  #   - name: Unpack gcc-preliminary
  #     run:
  #       tar xf gcc-preliminary.tar/gcc-preliminary.tar
  #   - name: Unpack glibc
  #     run:
  #       tar xf glibc.tar/glibc.tar
  #   - name: Unpack gcc
  #     run:
  #       tar xf gcc.tar/gcc.tar
  #   - name: Unpack ncurses
  #     run:
  #       tar xf ncurses.tar/ncurses.tar
  #   - name: Build emacs
  #     run: make -kj10 built/wasm32/emacs
  #   - name: Build emacs.wasm
  #     run: make -kj10 wasm/emacs.wasm
  #   - name: Upload emacs.wasm
  #     uses: actions/upload-artifact@v1
  #     with:
  #       name: emacs.wasm
  #       path: wasm/emacs.wasm

  ship_wasm:
    name: ship wasm
    runs-on: ubuntu-latest
    needs:
    - ncurses
    - bash
    - tests
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: false
    - name: Set env variables
      uses: ./github/env/
    - run: make -kj10 ship-wasm-latest!
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  ship_binutils:
    name: ship binutils
    runs-on: ubuntu-latest
    needs:
    - ncurses
    - bash
    - tests
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: false
    - name: Set env variables
      uses: ./github/env/
    - run: make -kj10 ship-binutils-latest!
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  ship_gcc:
    name: ship gcc
    runs-on: ubuntu-latest
    needs:
    - ncurses
    - bash
    - tests
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: false
    - name: Set env variables
      uses: ./github/env/
    - run: make -kj10 ship-gcc-latest!
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  ship_glibc:
    name: ship glibc
    runs-on: ubuntu-latest
    needs:
    - ncurses
    - bash
    - tests
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: false
    - name: Set env variables
      uses: ./github/env/
    - run: make -kj10 ship-glibc-latest!
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    name: release
    runs-on: ubuntu-latest
    needs:
    - ship_wasm
    - ship_binutils
    - ship_gcc
    - ship_glibc
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: false
        fetch-depth: 0
    - name: Set env variables
      uses: ./github/env/
    - run: make -kj10 github/check-release!
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        RELEASE_ID: 27619169

  # test-shipped:
  #   name: test shipped binaries
  #   runs-on: ubuntu-latest
  #   needs:
  #   - binutils
  #   - gcc-preliminary
  #   - jsshell
  #   - wasm32-js
  #   steps:
  #   - uses: actions/checkout@v2
  #     with:
  #       submodules: false
  #   - name: Download jsshell
  #     uses: actions/download-artifact@v1
  #     with:
  #       name: jsshell-linux-x86_64.zip
  #   - name: Unpack jsshell
  #     run: unzip jsshell-linux-x86_64.zip/jsshell-linux-x86_64.zip -d bin
  #   - name: Download wasm32.js
  #     uses: actions/download-artifact@v1
  #     with:
  #       name: wasm32.js
  #   - run: mkdir js
  #   - name: Unpack wasm32.js
  #     run: cp wasm32.js/wasm32.js js/wasm32.js
  #   - run: wget https://github.com/pipcet/wasm/releases/download/latest/ld.wasm
  #   - run: wget https://github.com/pipcet/wasm/releases/download/latest/libc.wasm
  #   - name: Download binutils
  #     uses: actions/download-artifact@v1
  #     with:
  #       name:
  #         binutils.tar
  #   - name: Unpack binutils
  #     run:
  #       tar xf binutils.tar/binutils.tar
  #   - name: Download gcc-preliminary
  #     uses: actions/download-artifact@v1
  #     with:
  #       name:
  #         gcc-preliminary.tar
  #   - name: Unpack gcc-preliminary
  #     run:
  #       tar xf gcc-preliminary.tar/gcc-preliminary.tar
  #   - run: ./wasm32-unknown-none/bin/wasm32-unknown-none-as -Iwasm32-unknown-none/lib/gcc/wasm32-unknown-none/11.0.0/gas-macros/ -c -o 001-hello-world.o testsuite/001-hello-world/hello-world.S
  #   - run: ./wasm32-unknown-none/bin/wasm32-unknown-none-ld -o 001-hello-world 001-hello-world.o
  #   - name: Directory shuffle
  #     run: mkdir wasm-dirs && mv *.wasm wasm-dirs
  #   - name: Copy *.wasm
  #     run: cp wasm-dirs/*.wasm/*.wasm .
  #   - name: Run
  #     run: WASMDIR=. ./bin/js ./js/wasm32.js ./001-hello-world.wasm

  gcc-c-torture-compile:
    name: gcc.c-torture/compile
    runs-on: ubuntu-latest
    needs:
    - jsshell
    - gcc
    - glibc
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: false
    - name: Set env variables
      uses: ./github/env/
    - run: JS=$(pwd)/bin/js WASMDIR=$(pwd) PATH=$PATH:$(pwd)/wasm32-unknown-none/bin make -kj10 gcc.c-torture/compile/compile.exp.{dejanew}!
  gcc-c-torture-execute:
    name: gcc.c-torture/execute
    runs-on: ubuntu-latest
    needs:
    - jsshell
    - gcc
    - glibc
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: false
    - name: Set env variables
      uses: ./github/env/
    - run: JS=$(pwd)/bin/js WASMDIR=$(pwd) PATH=$PATH:$(pwd)/wasm32-unknown-none/bin make -kj10 gcc.c-torture/execute/execute.exp.{dejanew}!
  gcc-c-torture-execute-ieee:
    name: gcc.c-torture/execute/ieee
    runs-on: ubuntu-latest
    needs:
    - jsshell
    - gcc
    - glibc
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: false
    - name: Set env variables
      uses: ./github/env/
    - run: JS=$(pwd)/bin/js WASMDIR=$(pwd) PATH=$PATH:$(pwd)/wasm32-unknown-none/bin make -kj10 gcc.c-torture/execute/ieee/ieee.exp.{dejanew}!
  gcc-dg-dg:
    name: gcc.dg/dg.exp
    runs-on: ubuntu-latest
    needs:
    - jsshell
    - gcc
    - glibc
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: false
    - name: Set env variables
      uses: ./github/env/
    - run: JS=$(pwd)/bin/js WASMDIR=$(pwd) PATH=$PATH:$(pwd)/wasm32-unknown-none/bin make gcc.dg/dg.exp.{dejanew}!
  binutils-check:
    name: make check (binutils)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: false
    - name: Set env variables
      uses: ./github/env/
    - run: make -kj10 binutils-test!

  coreutils:
    name: coreutils
    runs-on: ubuntu-latest
    needs:
      - ncurses
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: false
    - name: Set env variables
      uses: ./github/env/
    - run:
        JS=$(pwd)/bin/js WASMDIR=$(pwd) make -k artifact-coreutils!
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

