var args = ["./fannkuch"];
var env = [];

var system = new Wasm32System();

onmessage = event => {
    console.log("message " + event.data);
    var [kport, arraybuffer, rootdd_port, cwd_port, stdin_port, stdout_port, stderr_port, debug_port] = event.data;

    kport.start();

    var sizes = {
        tablesize: 65536,
        memsize: 64 * 1024 * 1024,
        stacksize: 1 * 1024 * 1024,
        stackbottom: 63 * 1024 * 1024,
    };
    var vm = new Wasm32VM(sizes);
    var process = new Wasm32Process(system);
    var module = new Wasm32Module(process, arraybuffer);

    var thread = new Wasm32Thread(kport, process, 8192);
    module.load(thread, vm).then(() => {
        var ret = module.instantiate(thread, vm, 0x4000, true);
        var tos = (module.dyninfo.data_end + 4095) & -4096;

        vm.%{zp[&zeropage::top_of_sbrk] = "tos"}

        return ret;
    }).then(() => {
        process.HEAP8 = vm.HEAP8;
        process.HEAP16 = vm.HEAP16;
        process.HEAP32 = vm.HEAP32;
        process.HEAPU8 = vm.HEAPU8;
        process.HEAPU16 = vm.HEAPU16;
        process.HEAPU32 = vm.HEAPU32;
        process.HEAPF32 = vm.HEAPF32;
        process.HEAPF64 = vm.HEAPF64;

        thread.heap = vm.heap;
        thread.HEAP8 = vm.HEAP8;
        thread.HEAP16 = vm.HEAP16;
        thread.HEAP32 = vm.HEAP32;
        thread.HEAPU8 = vm.HEAPU8;
        thread.HEAPU16 = vm.HEAPU16;
        thread.HEAPU32 = vm.HEAPU32;
        thread.HEAPF32 = vm.HEAPF32;
        thread.HEAPF64 = vm.HEAPF32;

        var HEAP32 = vm.HEAP32;

        %{zp[&zeropage::top_of_memory] = "module.top_of_memory"}
        %{zp[&zeropage::thread_list]} = %{tp1};
        %{zp[&zeropage::bottom_of_sbrk] = "module.start_of_sbrk"}

        %{tp1[&threadpage::next]} = %{tp1};
        %{tp1[&threadpage::prev]} = %{tp1};
        %{tp1[&threadpage::id] = "1"}
        %{tp1[&threadpage::bottom_of_stack] = "module.bottom_of_stack"}
        %{tp1[&threadpage::top_of_stack] = "module.top_of_stack"}

        module.top_of_stack = sizes.stackbottom + sizes.stacksize;
        var sp = system.init_sp(vm, module.top_of_stack, args, env);
        %{tp1[&threadpage::sp] = "sp"}
        %{tp1[&threadpage::initsp] = "sp"}

        %{tp1[&threadpage::pc] = "process.entry"}

        var rr0 = new RRPort(stdin_port);
        var rr1 = new RRPort(stdout_port);
        var rr2 = new RRPort(stderr_port);

        var pipe0 = new ThinThinHalf();
        var pipe1 = new ThinThinHalf();
        var pipe2 = new ThinThinHalf();

        new RRPortHalf(pipe0, rr0, true);
        new RRPortHalf(pipe1, rr1, true);
        new RRPortHalf(pipe2, rr2, true);

        new ThinThinHalfFD(process, pipe0, 0);
        new ThinThinHalfFD(process, pipe1, 1);
        new ThinThinHalfFD(process, pipe2, 2);

        rr0.port.start();
        rr1.port.start();
        rr2.port.start();
        var f;
        f = () => {
            debug_port.postMessage(`${pipe0.debug("pipe0", f)}<br>${pipe1.debug("pipe1", f)}<br>${pipe2.debug("pipe2", f)}`);
        };
        f();
        system.runqueue.push(thread);
    }).then(() => {
        console.log("started");
        postMessage(undefined);
        try {
            run = () => {
                try {
                    system.threads[0].step();
                    if (!system.threads[0].stopped())
                        Promise.resolve().then(run);
                } catch (e) {
                    console.log("another exception");
                    console.log(e);
                    console.log(e.stack);
                }
            };
            run();
        } catch (e) {
            console.log("exception");
            console.log(e);
            console.log(e.stack);
        }
    }).catch(e => {
        console.log("e: " + e);
    })
};
