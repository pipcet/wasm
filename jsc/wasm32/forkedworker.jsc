var args = ["./fannkuch", "10"];
var env = [];

var system = new Wasm32System();

onmessage = event => {
    console.log("message " + event.data);
    var [kport, frozen_process, frozen_vm, frozen_sp,
         fdports] = event.data;

    var process = new Wasm32Process(system);
    var thread = new Wasm32Thread(kport, process, 8192);

    thread.extcallRet[frozen_sp] = 0;

    var vm = thread.vm;
    var p = Promise.resolve();
    for (var frozen_module1 of frozen_process.modules) {
        let frozen_module = frozen_module1;
        let module = new Wasm32Module(process, frozen_module.bytes);
        module.module = frozen_module.module;
        p = p.then(() => {
            return module.reload_at(thread, vm, frozen_module);
        });
    }
    for (var frozen_fd of frozen_process.fds) {
        var fd = new ThinThinFD(process, frozen_fd.fdno);
    }

    p.then(() => {
        vm.alive(frozen_vm);
        thread.vm = vm;
        thread.first = false;
        thread.entry = 9;
        thread.heap = vm.heap;
        system.runqueue.push(thread);
        console.log("started");
        postMessage(undefined);
        try {
            for (var fdno in fdports) {
                var rr = new RRPort(fdports[fdno]);
                var pipe = new ThinThinHalf();
                new RRPortHalf(pipe, rr, true);
                new ThinThinHalfFD(process, pipe, fdno);
                rr.port.start();
            }
            run = () => {
                console.log("running");
                try {
                    system.threads[0].step();
                    if (!system.threads[0].stopped())
                        Promise.resolve().then(run);
                } catch (e) {
                    console.log("another exception");
                    console.log(e);
                    console.log(e.stack);
                }
            };
            run();
        } catch (e) {
            console.log("exception");
            console.log(e);
            console.log(e.stack);
        }
    });
};
