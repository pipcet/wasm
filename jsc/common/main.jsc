var args = (typeof (scriptArgs) === "undefined") ? process.argv.slice(2) : scriptArgs.slice(0);

var gdbpipes;
if (args[0] === "--gdbpipes") {
    gdbpipes = args[1];
    args.shift();
    args.shift();
}

var path = args.shift();
args.unshift("../../miniperl");
var remote;

function CStringAt(heap, offset)
{
    var ret = '';

    for (var i0 = offset; heap[i0]; i0++) {
        ret += String.fromCharCode(heap[i0]);
    }

    return ret;
}

function CStringsAt(heap, ptr)
{
    var HEAP32 = new Int32Array(heap);
    var HEAP8 = new Int8Array(heap);
    var res = [];

    while (HEAP32[ptr>>2]) {
        res.push(CStringAt(HEAP8, HEAP32[ptr>>2]));
        ptr += 4;
    }

    return res;
}

function CStringTo(str, heap, offset)
{
    var i0;

    for (i0 = 0; i0 < str.length; i0++) {
        heap[offset + i0] = str.charCodeAt(i0);
    }

    heap[offset + i0] = 0;

    return i0+1;
}

if (false) if (typeof window !== "undefined") {
    window.addEventListener("message", function (e) {
        var origin = e.origin || e.originalEvent.origin;
        alert (origin);

        if (origin &&
            origin !== "http://example.org:8080")
            return;

        var data = e.data;

        switch (data[0]) {
        case "send":
            var rfdno = data[1];
            var payload = data[2];
            var fd = gRemoteFDs[rfdno];

                alert("unknown rfd " + rfdno + " " + gRemoteFDs);
            if (fd) {
                fd.write(payload, 0, payload.byteLength);

                e.source.postMessage([rfdno, "sent"], "*");
            } else {
            }
            return;

        case "receive":
            var rfdno = data[1];
            var fd = gRemoteFDs[rfdno];
            var len = data[2];

            if (fd) {
                var heap = new ArrayBuffer(len);
                var heap8 = new Int8Array(heap);

                fd.read(heap8, 0, len).then(l => {
                    e.source.postMessage([rfdno, "read", heap], "*");
                });
            }

            return;
        }
    });
}

var sys;
var worker;

var copyvars = ["HOME", "MAKE", "LIBPERL_A", "PERL_CORE", "PATH", "EMACSLOADPATH", "EMACS_LOADPATH", "PERL_MM_USE_DEFAULT", "INSTALLDIRS", "PYTHONHOME"];

var restart;

function environment_variables()
{
    var env = [];

    if (typeof os === "undefined") {
    } else if ("getenvironment" in os) {
        env = os.getenvironment();
    } else {
        for (var i = 0; i < copyvars.length; i++) {
            var copyvar = copyvars[i];
            var value = os.getenv(copyvar);

            if (value !== undefined)
                env.push(copyvar + "=" + value);
        }
        env.push("TERM=vt100");
    }

    return env;
}

function newAsmJSModule(mod)
{
    sys = new AsmJSSystem();
    var env = [];

    if (typeof os === "undefined") {
    } else if ("getenvironment" in os) {
        env = os.getenvironment();
    } else {
        for (var i = 0; i < copyvars.length; i++) {
            var copyvar = copyvars[i];
            var value = os.getenv(copyvar);

            if (value !== undefined)
                env.push(copyvar + "=" + value);
        }
        env.push("TERM=vt100");
    }
    if (typeof global !== "undefined")
        args.shift();
    sys.instantiate(mod, args, env);
    //restart = function () {
    //sys.instantiate(mod, args, env);
    //};

    while (sys.runqueue.length)
        sys.step();
}

if (typeof global !== "undefined")
    run = () => global.setInterval(() => sys.step(), 0);

function update() {
    if (!sys.threads || !sys.threads[0]) {
        return;
    }

    while (sys.threads[0].stopped() == 0)
        sys.step();

    if (sys.threads.length == 0 || sys.threads[0].stopped() == -1)
        restart();
    else if (sys.threads[0].exports.dograph) {
        outstr = "";
        counter++;
        document.getElementById("dot-counter").innerHTML = counter.toString();
        content = document.getElementById("dot-input").value;
        var start = Date.now();
        var i = 0;
        var res;
        var str;
        res = sys.threads[0].exports.dograph(content);
        var dur = Date.now() - start;

        if (res)
            str = res.toString();
        else
            str = "";

        outstr = str;
        document.getElementById("svg-output").innerHTML = str;
        counter = dur;
        document.getElementById("dot-counter").innerHTML = counter.toString();

        if (res)
            sys.threads[0].exports.free(res);
    }
}

if (false) if (typeof window !== "undefined") {
    document.getElementById("dot-input").oninput = update;
    window.setInterval(update, 5);
}

//     worker = new Worker("asmjs-worker.js");
//     worker.onmessage = function (e) {
//         var data = e.data;

//         switch (data[0]) {
//         case "send":
//             var rfdno = data[1];
//             var payload = data[2];
//             var fd = gRemoteFDs[rfdno];

//             if (fd) {
//                 fd.write(new Uint8Array(payload), 0, payload.byteLength)
//                     .then((len) => {
//                         worker.postMessage(["sent", rfdno, len]);
//                     });
//             } else {
//                 alert("unknown rfd " + rfdno + " " + gRemoteFDs);
//             }
//             return;

//         case "receive":
//             var rfdno = data[1];
//             var fd = gRemoteFDs[rfdno];
//             var len = data[2];

//             if (fd) {
//                 var heap = new ArrayBuffer(len);
//                 var heap8 = new Int8Array(heap);

//                 fd.read(heap8, 0, len).then(l => {
//                     e.source.postMessage([rfdno, "read", heap], "*");
//                 });
//             }

//             return;
//         }
//     };
//     worker.postMessage(["process", sys.processes[0].freeze()]);
// }
